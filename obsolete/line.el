(defun move-to-window-prev-line (arg)
"move window previous line"
	(interactive "p")
		(progn
		(if (equal arg nil)
		(setq arg 1))
	(while (< 0 arg)
		(let ((cc (current-column))
		(ww (window-width))
		(lw nil)
		(wc (% (current-column) (1- (window-width)))))
	(setq arg (1- arg))
	(if (>= cc (1- ww))
		(move-to-column (1+ (- cc ww)))
		(progn
			(previous-line 1)
			(end-of-line 1)
			(setq lw (current-column))
			(if (>= lw ww)
				(move-to-column (+ (* (/ lw (1- ww)) (1- ww)) wc))
			(move-to-column wc))))))))

(defun my-next-line (arg)
	(interactive "p")
	(if (fboundp 'line-move)
		(line-move arg)
	(if (fboundp 'next-line-internal)
		(next-line-internal arg)
		(next-line arg))))

(defun move-to-window-next-line (arg)
	"move window next line"
	(interactive "p")
	(progn
		(if (equal arg nil)
			(setq arg 1))
		(while (< 0 arg)
			(let ((cc (current-column))
				(ww (window-width))
				(lw nil)
				(wc (% (current-column) (1- (window-width)))))
			(setq arg (1- arg))
			(end-of-line 1)
			(setq lw (current-column))
			(if (< (+ cc (1- ww)) lw)
				(move-to-column (+ cc (1- ww)))
				(progn
					(my-next-line 1)
					(move-to-column (% cc (1- ww)))))))))

(define-key global-map "\C-p" 'move-to-window-prev-line)
(define-key global-map "\C-n" 'move-to-window-next-line)
(define-key global-map [up] 'move-to-window-prev-line)
(define-key global-map [down] 'move-to-window-next-line)
